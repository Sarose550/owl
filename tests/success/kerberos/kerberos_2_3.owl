// Steps 2 and 3 of kerberos
include "kerberos.owli"

def ticketserver_main () @ ticketserver
    : Unit =

    // i = (AK)_kT, (ClientRequest)_AK 
    input i in 
    
    corr_case kT in
    parse i as client_to_ticketserver_msg(c, t) in 
    case adec(get(kT), c) {
         | None => ()
         | Some ak =>
         
             corr_case AK in
             case adec(ak, t) {
                 | Some ClientRequest =>
                     let st =  aenc(get(kS), get(SK)) in
                     let m =  aenc(ak, TicketResponse(get(SK))) in
                     let p = ticketserver_msg(st, m) in
                     let _ = output p to endpoint(client) in ()
                 | None => ()
             }
    }
    otherwise ()


def service_main () @ service
    : Unit =

    // i = (SK)_kS, ("client")_SK
    input i in
    
    corr_case kS in
    parse i as client_to_service_msg(c1, c2) in 
    case adec(get(kS), c1) {
         | None => ()
         | Some sk =>
             corr_case SK in
             case adec(sk, c2) {
                 | None => ()
                 | Some u =>
                     if eq(u, get(uname)) then
                         let _ = output 0 to endpoint(client) in ()
                     else ()
             }
    }
    otherwise ()

// called by the respective client_main() functions for the two versions of kerberos
def client_kerberos (ak: if sec(K) then Name(AK) else Data<adv>, tgt : Data<adv>
|cipherlen(|enckey|)|, username : Data<adv> ||nonce||) @ client
    requires [AK] <= [K]
    : Unit = 
    corr_case AK in
    corr_case K in
    let m =  aenc(ak, ClientRequest()) in
    let p = client_to_ticketserver_msg(tgt, m) in
    let _ = output p to endpoint(ticketserver) in

    input i' in 
    parse i' as ticketserver_msg(service_ticket, c) in 
    case adec(ak, c) {
        | None => ()
        | Some res =>
            case res as AKEnum {
                | ClientRequest => () 
                | TicketResponse sk => 
                let m' =  aenc(sk, username) in
                let p' = client_to_service_msg(service_ticket, m') in
                let _ = output p' to endpoint(service) in 
                // wait for service's response
                input _ in () 
                otherwise => ()
            }
    }
    otherwise ()
