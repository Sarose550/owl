locality alice
name X<i> : nonce @ alice

func some_length
    arity 0

struct t<i> {
    _x : Name(X<i>),
    _y : Data<adv> |some_length()|
}


def a<i> () @ alice : Unit = 
    input i in
    debug "=======";
    debug "Good case for foo";
    debug "=======";
    let b = eq(length(i), some_length()) in
    if b then
        // TODO: currently the type system requires you to unfold out your major
        // subtyping queries into different let statements. So putting "i"
        // instead of "j" won't work below.
        let j : Data<adv> |some_length()| = i in
        let foo : t<idx i>  = t<idx i>(get(X<i>), j) in
        parse foo as t<idx i>(x', y') in 
        // When we print, we see that foo has type t
        debug printTyContext;
        ()
    else
        ()

def b<i> () @ alice : Unit = 
    debug "=======";
    debug "Bad case for foo";
    debug "=======";
    input i in
    let foo = t<idx i>(get(X<i>), i) in
    parse foo as t<idx i>(x', y') in 
    // When we print, we see that foo only has type Data<[X] /\ adv>
    debug printTyContext;
    ()
    otherwise ()
