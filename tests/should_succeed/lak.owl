/* 
 * LAK
 * https://arxiv.org/pdf/1710.02049.pdf
 * https://pdfs.semanticscholar.org/d226/deb2b3b416716e3f5fdfe3083afa33ae8257.pdf
 * https://github.com/squirrel-prover/squirrel-prover/blob/master/examples/lak-tags-full-wa.sp
 *
 * Protocol:
 * --------
 * R -> T: nr
 * T -> R: nT, h(<nR, nT, tag1>, k)
 * R -> T: h(<h(<nR, nT, tag1>, k), nr, tag2>, k)
 */

locality T
locality R

name nT : nonce @ T
name nR : nonce @ R

struct m1 { // MAC'd by k
    m1_nr  : Data<adv>,
    m1_nt  : Data<adv>,
    m1_tag : Data<adv> 
}

struct m2 {
    m2_nt  : Data<adv>,
    m2_mac : Data<adv>
}

struct m3 { // MAC'd by k
    m3_mac : Data<adv>, // change to Data<static>?
    // m3_nr  : Name(nR),
    m3_nr  : Data<adv>,
    m3_tag : Data<static>
}

enum macd_by_k {
    | msg1 m1
    | msg2 m3
    // | msg2 (__m:m3{happened(tag())})
}

name k : mackey macd_by_k<adv> @ T, R

enum reader_response {
    | Ok
    | No
}

def reader (
    tag1 : Data<adv>, // should be replaced with `exists` + table lookup
    tag2 : Data<static>
) @ R
    requires [nR] <= adv
: reader_response<adv> =
    let _ = output get(nR) in

    input i in
    let NT = m2_nt(i) in
    let mc = m2_mac(i) in
    let NR = get(nR) in
    let msg_to_mac_verify = msg1(m1(NR, NT, tag1)) in
    corr_case k in
    case mac_vrfy(get(k), msg_to_mac_verify, mc) return reader_response<adv>
    | None => No()
    | Some m =>
        let msg_to_mac = msg2(m3(i, NR, tag2)) in
        let _ = output mac(get(k), msg_to_mac) in
        Ok()

def tag (
    tag1 : Data<adv>
) @ T
    requires ([nT] <= adv)
: Unit =
    input NR in
    let msg_to_mac = msg1(m1(NR, get(nT), tag1)) in
    let msg  = mac(get(k), msg_to_mac) in 
    output msg
    // let m = mac(get(k), get(nT)) in
    // output s(get(nT), m)
