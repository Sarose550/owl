/*
 * Protocol:
 * ---------
 * R --> T: nr
 * T --> R: nt, id + H(<c0, nr, nt>,k)
 * R --> T: id + H(<c1, nr, nt>,k)
 */
 

locality T
locality R

name NT<i> : nonce @ T
name NR<i> : nonce @ R
flow /\_i [NR<i>] <= adv
flow /\_i [NT<i>] <= adv
// name ID<i> : nonce @ T, R

func xor
    arity 2


struct h1_t<i> {
    h1_c  : Data<static>,
    h1_nr : Data<adv>,
    h1_nt : Name(NT<i>)
}


name K<i> : mackey (t:h1_t<idx i>{happened(tag<i>())}) @ T, R

struct m1_t {
    m1_nt     : Data<adv>,
    m1_xormac : Data<adv>
}

struct pair<i> {
    _id : Data<static>,
    _k  : Name(K<i>)
}

// table keys : adv -> (exists i. Name(K<i>)) @ R
table keys : adv -> (exists i. pair<idx i>) @ R

enum reader_response {
    // | Ok (exists i. (x:Data<adv>{sec(K<i>) ==> ((x = get(NT<i>)) && happened(tag<i>()))}))
    | Ok
    | No
}

def reader<i>(c0: Data<static>, c1: Data<static>) @ R
: reader_response<l:adv> =
    let nR = get(NR<i>) in
    let _ = output(nR) in

    input inp in
    let nT = m1_nt(inp) in
    let mc = m1_xormac(inp) in
    

    // let x: Option<adv>(exists j. Name(K<j>)) = lookup(keys, nT) in
    let x: Option<adv>(exists j. pair<idx j>) = lookup(keys, nT) in

    (case x
        | None => No()
        | Some p_packed =>
            unpack j, p = p_packed in
            let id = _id<idx j>(p) in
            let k = _k<idx j>(p) in
            corr_case K<j> in

            let mac_to_verify = h1_t<idx j>(c0, nR, nT) in

            let mc'  = xor(id, mc) in
            case mac_vrfy(k, mac_to_verify, mc') 
                | None => No()
                | Some m =>
                    // let _ = check_equal(mc, xor(id, m)) in
                    assert(sec(K<j>) ==> happened(tag<j>()));
                    let nT' = h1_nt<idx j>(m) in

                    let msg_to_mac = h1_t<idx j>(c1, nR, nT') in
                    let _ = output xor(id, msg_to_mac) in
                    Ok()
    )

def tag<i> (id: Data<static>, c0: Data<static>) @ T
: Unit =
    assert(happened(tag<i>(id, c0)));
    input inp in
    let nT = get(NT<i>) in
    let msg_to_mac = h1_t<idx i>(c0, inp, nT) in
    let m = mac(get(K<i>), msg_to_mac) in
    let x = xor(id, m) in
    output m1_t(nT, x)
