/*
 * Protocol:
 * ---------
 * R --> T: nr
 * T --> R: nt, id + H(<c0, nr, nt>,k)
 * R --> T: id + H(<c1, nr, nt>,k)
 */
 

locality T
locality R

name NR : nonce @ R
name NT : nonce @ T

func xor
    arity 2


struct h1_t {
    h1_c  : Data<static>,
    h1_nr : Data<adv>,
    h1_nt : Data<adv>
}

name K : mackey h1_t @ T, R

struct m1_t {
    m1_nt     : Data<adv>,
    m1_xormac : Data<adv>
}

// table keys : adv -> (exists i. Name<K<i>>) @ R

def reader() @ R
    requires [NR] <= adv
: Unit =
    let nR = get(NR) in
    let _ = output(nR) in

    input inp in
    let nT = m1_nt(inp) in
    let mc = m1_xormac(inp) in
    
    ()

def tag (id: Data<static>, c0: Data<static>) @ T
: Unit =
    input inp in
    let nT = get(NT) in
    let msg_to_mac = h1_t(c0, inp, nT) in
    let m = mac(get(K), msg_to_mac) in
    let x = xor(id, m) in
    output m1_t(nT, x)
