/*

type := 0x1 (1 byte) 
reserved := 0^3 (3 bytes)
sender := I_i (4 bytes)
ephemeral (32 bytes)
static (32 bytes)
timestamp (12 bytes)
mac1 (16 bytes) 
mac2 (16 bytes)

CONSTANTS:
construction -> 0x636f6e737472756374696f6e
identifier -> 0x6964656e746966696572
mac1--- -> 0x6d6163312d2d2d

*/

/*
TODOs: 
- specify authenticated data values for the AEAD names generated from msg1_C2 and msg1_C3 (new primitive for aenc)
- synchronized enckey_with_nonce counters across multiple localities
- think about timestamp() --- indexed nonce?

*/




locality Initiator
locality Responder

// Ephemeral Diffie-Hellman keys
name E_init : DH @ Initiator
name E_resp : DH @ Responder

// Static Diffie-Hellman keys (public keys should be preshared)
name S_init : DH @ Initiator
name S_resp : DH @ Responder

predicate msg1_C2_aad(x) = 
    (x ==
     crh(concat(
             crh(concat(
                     crh(concat(
                         crh(0x636f6e737472756374696f6e), // construction
                         0x6964656e746966696572 // identifier
                             )),
                      dhpk(get(S_resp))
                     )),
             dhpk(get(E_init))) 
            ))

predicate msg1_C3_aad(x) = 
    (exists y : bv. 
        exists z : bv. 
            msg1_C2_aad[y] /\
            x == crh(concat(y, z))
    )
    
    

// TODO: problematic for disjointness
name msg1_C1 : RO crh(0x636f6e737472756374696f6e) || dhpk(get(E_init)) -> nonce
counter aead_counter_msg1_C2 @ Initiator
name msg1_C2 : RO get(msg1_C1) || dh_combine(dhpk(get(S_resp)), get(E_init)) -> nonce || 
    st_aead dhpk(S_init)
            aad x. msg1_C2_aad[x]
            nonce aead_counter_msg1_C2
            nonce_pattern *
counter aead_counter_msg1_C3 @ Initiator
name msg1_C3 : RO get(msg1_C2[0]) || dh_combine(dhpk(get(S_resp)), get(S_init)) -> nonce || 
    st_aead (Data<adv> |12|)
            aad x. msg1_C3_aad[x]
            nonce aead_counter_msg1_C3
            nonce_pattern *

// needs to use the crh hash function, rather than kdf
// TODO: problematic for RO disjointness
name msg1_mac1_key : RO 0x6d6163312d2d2d || dhpk(get(S_resp)) -> mackey Data<adv> 

name msg2_C4 : RO get(msg1_C3[0]) || dhpk(get(E_resp)) -> nonce
name msg2_C5 : RO get(msg2_C4[0]) || dh_combine(dhpk(get(E_init)), get(E_resp)) -> nonce
name msg2_C6 : RO get(msg2_C5[0]) || dh_combine(dhpk(get(S_init)), get(E_resp)) -> nonce
counter aead_counter_msg2_C7 @ Responder

// TODO: doesn't yet work for the protocol
predicate msg2_C7_aad(x) =  
    exists msg_timestamp : bv. 
        exists h : bv.
            exists tau : bv. 
            msg1_C3_aad[h] /\
            x == crh(concat(
                        crh(concat(
                            crh(concat(h, msg_timestamp)),
                            dhpk(get(E_resp))
                                )),
                        tau))
            
        

// TODO: problematic for disjointness
name msg2_C7 : RO get(msg2_C6[0]) || (0x00000000) -> nonce || nonce || 
    st_aead (Data<adv> |0|)
            aad x. true
            nonce aead_counter_msg2_C7
            nonce_pattern *
    uniqueness_by (
        let x = concat(get(msg2_C6[0]), 0x00000000) in 
        assume (x != preimage(msg1_C1));
        assume (x != preimage(msg1_mac1_key));
        ()
        )

    

corr adv ==> [msg2_C7[1]]

// needs to use the crh hash function, rather than kdf
name msg2_mac1_key : RO 0x6d6163312d2d2d || dhpk(get(S_init)) -> mackey Data<adv>
    uniqueness_by (
        let x = concat(0x6d6163312d2d2d, dhpk(get(S_init))) in 
        assume (x != preimage(msg2_C7));
        ()
        )

// TODO
name plaintext_init : nonce @ Initiator
name plaintext_resp : nonce @ Responder

counter N_init_send @ Initiator
counter N_init_recv @ Initiator
counter N_resp_send @ Responder
counter N_resp_recv @ Responder

// T_init_send = T_resp_recv || T_resp_send = T_init_recv
name transp_T : RO get(msg2_C7[0]) || 0x -> 
    st_aead (Name(plaintext_init))
        aad x. true
        nonce N_init_send
        nonce_pattern * ||
    st_aead (Name(plaintext_resp))
        aad x. true
        nonce N_resp_send
        nonce_pattern *
    uniqueness_by (
        let x = concat(get(msg2_C7[0]), 0x) in  
        assume (x != preimage(msg1_C1));
        assume (x != preimage(msg1_mac1_key));
        assume (x != preimage(msg2_mac1_key));
        ()
        )

corr [transp_T[0]] ==> [plaintext_init]

////////////////////////////
// Message formats

struct msg1_payload {
      _msg1_reserved : Data<adv> |3|
    , _msg1_sender : Data<adv> |4| // bytes??
    , _msg1_ephemeral : dhpk(E_init)
    , _msg1_static : Data<adv> | cipherlen(length(dhpk(get(S_init)))) |
    , _msg1_timestamp: Data<adv> | cipherlen(12) |
    // TODO cookie mechanism
    , _msg1_mac1: Data<adv> | |maclen| |
    // , _msg1_mac2: Data<adv> | |maclen| |
}

struct msg2_payload {
      _msg2_reserved : Data<adv> |3|
    , _msg2_sender: Data<adv> |4|
    , _msg2_receiver: Data<adv> |4|
    , _msg2_ephemeral: dhpk(E_resp)
    , _msg2_empty: Data<adv> | cipherlen(0) |
    // TODO cookie mechanism
    , _msg2_mac1: Data<adv> | |maclen| |
    // , _msg2_mac2: Data<adv> | |maclen| |
}

struct transp_payload {
      _transp_reserved : Data<adv> |3|
    , _transp_receiver : Data<adv> |4|
    , _transp_counter  : Data<adv> | 8 | // TODO need Data<adv> | |counter| |
    , _transp_packet   : Data<adv> | |nonce| | // TODO 
}

enum msg {
    | msg1 msg1_payload     // 0x1
    | msg2 msg2_payload     // 0x2
    | unused_tag_filler     // 0x3 (tag not used in wireguard)
    | transp transp_payload // 0x4
}

////////////////////////////
// Primitives

def get_padding_i () @ Initiator : Data<adv> |3| // TODO primitive for zero bytes?
def get_sender_i  () @ Initiator : Data<adv> |4| // TODO can we model this as a nonce?
def timestamp_i   () @ Initiator : Data<adv> |12|
def get_empty_i   () @ Initiator : Data<adv> |0|

def get_padding_r () @ Responder : Data<adv> |3| // TODO primitive for zero bytes?
def get_sender_r  () @ Responder : Data<adv> |4| // TODO can we model this as a nonce?
def timestamp_r   () @ Responder : Data<adv> |12|
def get_empty_r   () @ Responder : Data<adv> |0|

////////////////////////////
// Return data

struct initiator_msg1_val {
      _initiator_msg1_C3 : Name(msg1_C3[0])
    , _initiator_msg1_H4 : Data<adv> // todo
}

struct responder_msg1_val {
      _responder_msg1_C3 : Union<Name(msg1_C3[0]), Data<adv>>
    , _responder_msg1_H4 : Data<adv> // todo
    , _responder_msg1_ephemeral : Data<adv>
    , _responder_msg1_sender : Data<adv> |4|
}

predicate not_in_ro(x) = (
                    x != preimage(msg1_C1)
                 /\ x != preimage(msg1_C2)
                 /\ x != preimage(msg1_C3)
                 /\ x != preimage(msg1_mac1_key)
                 /\ x != preimage(msg2_C4)
                 /\ x != preimage(msg2_C5)
                 /\ x != preimage(msg2_C6)
                 /\ x != preimage(msg2_C7)
                 /\ x != preimage(msg2_mac1_key)
                 /\ x != preimage(transp_T))

predicate valid_responder_msg1_val (s) = 
    is_group_elem(_responder_msg1_ephemeral(s)) /\ 
    ((_responder_msg1_ephemeral(s) == dhpk(get(E_init))) ==> (
        _responder_msg1_C3(s) == get(msg1_C3[0])
    )) 
    /\ ((_responder_msg1_ephemeral(s) != dhpk(get(E_init))) ==> (
        _responder_msg1_C3(s) != get(msg1_C3[0]) 
        /\ not_in_ro[concat(_responder_msg1_C3(s), dhpk(get(E_resp)))]))

type responder_msg1_val_t = s:responder_msg1_val {valid_responder_msg1_val[s]}

struct transp_keys {
      _transp_keys_initiator : Data<adv> |4|  // value of get_sender_i
    , _transp_keys_responder : Data<adv> |4|  // value of get_sender_r
    , _transp_keys_msg1_ephemeral : Data<adv> // TODO should be ghost
    , _transp_keys_msg2_ephemeral : Data<adv> // TODO should be ghost
    , _transp_keys_T_init_send : Union<Name(transp_T[0]), Data<adv>>
    , _transp_keys_T_resp_send : Union<Name(transp_T[1]), Data<adv>>
}

predicate valid_transp_keys (s) =
    is_group_elem(_transp_keys_msg1_ephemeral(s)) /\ 
    is_group_elem(_transp_keys_msg2_ephemeral(s)) /\ 
    ((_transp_keys_msg1_ephemeral(s) == dhpk(get(E_init)) 
      /\ (_transp_keys_msg2_ephemeral(s) == dhpk(get(E_resp)))) ==> (
        _transp_keys_T_init_send(s) == get(transp_T[0]) /\ _transp_keys_T_resp_send(s) == get(transp_T[1])
    )) /\ 
    ((_transp_keys_msg1_ephemeral(s) != dhpk(get(E_init))) ==> (
        _transp_keys_T_init_send(s) != get(transp_T[0]) /\ _transp_keys_T_resp_send(s) != get(transp_T[1])
    )) /\ 
    ((_transp_keys_msg2_ephemeral(s) != dhpk(get(E_resp))) ==> (
        _transp_keys_T_init_send(s) != get(transp_T[0]) /\ _transp_keys_T_resp_send(s) != get(transp_T[1])
    ))

type transp_keys_t = s:transp_keys {valid_transp_keys[s]}

// struct msg2_val {
//       _msg2_val_msg1_ephemeral : Data<adv>
//     , _msg2_val_msg2_ephemeral : Data<adv>
//     , _msg2_val_C7 : Union<Name(msg2_C7[0]), Data<adv>>
//     , _msg2_val_H7 : Data<adv>
// }

// predicate valid_msg2_val (s) = 
//     is_group_elem(_msg2_val_msg1_ephemeral(s)) /\ 
//     is_group_elem(_msg2_val_msg2_ephemeral(s)) /\ 
//     ((_msg2_val_msg1_ephemeral(s) == dhpk(get(E_init)) /\ (_msg2_val_msg2_ephemeral(s) == dhpk(get(E_resp)))) ==> (
//         _msg2_val_C7(s) == get(msg2_C7[0])
//     )) 
//     /\ ((_msg2_val_msg1_ephemeral(s) != dhpk(get(E_init))) ==> (
//         _msg2_val_C7(s) != get(msg2_C7[0]) 
//         /\ not_in_ro[concat(_msg2_val_C7(s), "")]))
//     /\ ((_msg2_val_msg2_ephemeral(s) != dhpk(get(E_resp))) ==> (
//         _msg2_val_C7(s) != get(msg2_C7[0]) 
//         /\ not_in_ro[concat(_msg2_val_C7(s), "")]))

// type msg2_val_t = s:msg2_val {valid_msg2_val[s]}

def tst_disjointness() @ Initiator : Unit = 
    assert (preimage(msg2_C7) != preimage(msg1_C1))


def generate_msg1 (dhpk_S_resp : dhpk(S_resp)) @ Initiator : initiator_msg1_val =
    let C0 = crh(0x636f6e737472756374696f6e) in
    let H0 = crh(concat(C0, 0x6964656e746966696572)) in 
    let H1 = crh(concat(H0, dhpk_S_resp)) in
    let C1 = hash<msg1_C1>(C0, dhpk(get(E_init))) in 
    let msg1_ephemeral = dhpk(get(E_init)) in
    let H2 = crh(concat(H1, msg1_ephemeral)) in
    let C2 = hash<msg1_C2;0>(C1, dh_combine(dhpk_S_resp, get(E_init))) in
    let k0 = hash<msg1_C2;1>(C1, dh_combine(dhpk_S_resp, get(E_init))) in
    let msg1_static : Data<adv> |cipherlen(length(dhpk(get(S_init))))| 
        = st_aead_enc<aead_counter_msg1_C2>(k0, dhpk(get(S_init)), H2) in 
    let H3 = crh(concat(H2, msg1_static)) in
    let C3 = hash<msg1_C3;0>(C2, dh_combine(dhpk_S_resp, get(S_init))) in
    let k1 = hash<msg1_C3;1>(C2, dh_combine(dhpk_S_resp, get(S_init))) in
    let timestamp = call timestamp_i() in
    let msg1_timestamp : Data<adv> |cipherlen(12)| =
    st_aead_enc<aead_counter_msg1_C3>(k1, timestamp, H3) in 
    let H4 = crh(concat(H3, timestamp)) in

    let msg1_sender : Data<adv> |4| = call get_sender_i() in
    let msg1_reserved : Data<adv> |3| = call get_padding_i() in

    let msg1_mac1_k = hash<msg1_mac1_key>(0x6d6163312d2d2d, dhpk_S_resp) in 
    // TODO this needs to incorporate the tag byte 
    let msg1_mac1 : Data<adv> | |maclen| | = mac(msg1_mac1_k, 
        concat(msg1_reserved, concat(msg1_sender, concat(msg1_ephemeral,
        concat(msg1_static, msg1_timestamp))))) in 
    let msg1_payload_value = msg1_payload(msg1_reserved, msg1_sender,
    msg1_ephemeral, msg1_static, msg1_timestamp, msg1_mac1) in
    let msg1_output = msg1(msg1_payload_value) in
    let _ = output msg1_output in 
    
    let retval = initiator_msg1_val(C3, H4) in
    retval


def receive_msg1 (dhpk_S_init : dhpk(S_init)) @ Responder 
     : Option (responder_msg1_val_t) 
     =
     set_option ":rlimit" "2000000" in 
     input inp in
     let msg1_reserved = _msg1_reserved(inp) in
     let msg1_sender = _msg1_sender(inp) in 
     let msg1_ephemeral = _msg1_ephemeral(inp) in
     let msg1_static = _msg1_static(inp) in
     let msg1_timestamp = _msg1_timestamp(inp) in
     let msg1_mac1 = _msg1_mac1(inp) in
     guard eq(length(msg1_sender), 4) in 
     guard is_group_elem(msg1_ephemeral) in 
     let C0 = crh(0x636f6e737472756374696f6e) in
     let H0 = crh(concat(C0, 0x6964656e746966696572)) in 
     let H1 = crh(concat(H0, dhpk(get(S_resp)))) in
     pcase (msg1_ephemeral != dhpk(get(E_init))) in
     let C1 = hash<msg1_C1>(C0, msg1_ephemeral) in 
     let H2 = crh(concat(H1, msg1_ephemeral)) in

     // TODO this fails when the transp_T oracle is added?
     assume(length(dh_combine(msg1_ephemeral, get(S_resp))) != 0);
     assert(concat(C1, dh_combine(msg1_ephemeral, get(S_resp))) != concat(get(msg2_C7[0]), 0x));
     assume(not_in_ro[concat(C1, dh_combine(msg1_ephemeral, get(S_resp)))]);

     let C2 = hash<msg1_C2;0>(C1, dh_combine(msg1_ephemeral, get(S_resp))) in
     let k0 = hash<msg1_C2;1>(C1, dh_combine(msg1_ephemeral, get(S_resp))) in

     corr_case msg1_C2[1] when (msg1_ephemeral == dhpk(get(E_init))) in
     case st_aead_dec(k0, msg1_static, 0x, H2) 
         | None => None<ty:responder_msg1_val_t>()
         | Some msg1_static_dec => 
                guard eq(msg1_static_dec, dhpk_S_init) in 
                let H3 = crh(concat(H2, dhpk_S_init)) in
                assert(msg1_ephemeral != dhpk(get(E_init)) ==> 
                    not_in_ro[concat(C2, dh_combine(dhpk_S_init, get(S_resp)))]);

                let C3 = hash<msg1_C3;0>(C2, dh_combine(dhpk_S_init, get(S_resp))) in
                let k1 = hash<msg1_C3;1>(C2, dh_combine(dhpk_S_init, get(S_resp))) in
                
                corr_case msg1_C3[1] when (msg1_ephemeral == dhpk(get(E_init))) in
                case st_aead_dec(k1, msg1_timestamp, 0x, H3) 
                | None => None<ty:responder_msg1_val_t>()
                | Some msg1_timestamp_dec =>
                   let H4 = crh(concat(H3, msg1_timestamp_dec)) in

                   let retval = responder_msg1_val(C3, H4, msg1_ephemeral, msg1_sender) in
                   Some(retval)

def generate_msg2 (msg1_val: responder_msg1_val_t, dhpk_S_init : dhpk(S_init)) @ Responder 
    : transp_keys_t = 
    let C3_union = _responder_msg1_C3(msg1_val) in     
    let H4 = _responder_msg1_H4(msg1_val) in
    let dhpk_E_init = _responder_msg1_ephemeral(msg1_val) in
    let msg2_receiver = _responder_msg1_sender(msg1_val) in
    
    pcase (dhpk_E_init != dhpk(get(E_init))) in 
    union_case C3 = C3_union in
    false_elim in 
    
    let psk = 0x00000000 in // should be zeros(32)

    let C4 = hash<msg2_C4>(C3, dhpk(get(E_resp))) in
    let msg2_ephemeral = dhpk(get(E_resp)) in
    let H5 = crh(concat(H4, msg2_ephemeral)) in
    
    // let x = concat(C4, dh_combine(dhpk_E_init, get(E_resp))) in
    let C5 = hash<msg2_C5>(C4, dh_combine(dhpk_E_init, get(E_resp))) in


    let C6 = hash<msg2_C6>(C5, dh_combine(dhpk_S_init, get(E_resp))) in
    let C7 = hash<msg2_C7;0>(C6, psk) in
    let tau = hash<msg2_C7;1>(C6, psk) in
    let k0 = hash<msg2_C7;2>(C6, psk) in
    let H6 : Data<adv> = crh(concat(H5, tau)) in
    let emptystring : Data<adv> |0| = call get_empty_r() in
    let msg2_empty : Data<adv> |cipherlen(0)| = st_aead_enc<aead_counter_msg2_C7>(k0, emptystring, H6) in
    let H7 = crh(concat(H6, msg2_empty)) in

    let msg2_sender : Data<adv> |4| = call get_sender_r() in
    let msg2_reserved : Data<adv> |3| = call get_padding_r() in

    let msg2_mac1_k = hash<msg2_mac1_key>(0x6d6163312d2d2d, dhpk_S_init) in
    // // TODO this needs to incorporate the tag byte
    let msg2_mac1 : Data<adv> | |maclen| | = mac(msg2_mac1_k,
        concat(msg2_reserved, concat(msg2_sender, concat(msg2_receiver, concat(msg2_ephemeral, msg2_empty))))
    ) in
    let msg2_payload_value = msg2_payload(
        msg2_reserved, msg2_sender, msg2_receiver, msg2_ephemeral, msg2_empty, msg2_mac1
    ) in
    let msg2_output = msg2(msg2_payload_value) in
    let _ = output msg2_output in
    
    // Calculate transport keys
    let T_resp_recv = hash<transp_T;0>(C7, 0x) in
    let T_resp_send = hash<transp_T;1>(C7, 0x) in
    let retval = transp_keys(msg2_receiver, msg2_sender, dhpk_E_init, msg2_ephemeral, T_resp_recv, T_resp_send) in

    retval


def receive_msg2 (msg1_val: initiator_msg1_val, dhpk_S_resp : dhpk(S_resp)) @ Initiator 
    : Option (transp_keys_t) =
    input inp in
    let msg2_reserved = _msg2_reserved(inp) in
    let msg2_sender = _msg2_sender(inp) in 
    let msg2_receiver = _msg2_receiver(inp) in
    let msg2_ephemeral = _msg2_ephemeral(inp) in
    let msg2_empty = _msg2_empty(inp) in
    let msg2_mac1 = _msg2_mac1(inp) in
    let C3 = _initiator_msg1_C3(msg1_val) in
    let H4 = _initiator_msg1_H4(msg1_val) in

    guard andb(eq(length(msg2_sender), 4), eq(length(msg2_receiver), 4)) in
    guard is_group_elem(msg2_ephemeral) in 

    let psk = 0x00000000 in // should be zeros(32)

    pcase (msg2_ephemeral == dhpk(get(E_resp))) in

    assume (msg2_ephemeral != dhpk(get(E_resp)) ==> 
        not_in_ro[concat(C3, msg2_ephemeral)]
        );
    let C4 = hash<msg2_C4>(C3, msg2_ephemeral) in
    let H5 = crh(concat(H4, msg2_ephemeral)) in
    
    assume (msg2_ephemeral != dhpk(get(E_resp)) ==> 
        not_in_ro[concat(C4, dh_combine(msg2_ephemeral, get(E_init)))] 
        );
    let C5 = hash<msg2_C5>(C4, dh_combine(msg2_ephemeral, get(E_init))) in

    assume (msg2_ephemeral != dhpk(get(E_resp)) ==> 
        not_in_ro[concat(C5, dh_combine(msg2_ephemeral, get(S_init)))] 
        );
    let C6 = hash<msg2_C6>(C5, dh_combine(msg2_ephemeral, get(S_init))) in
    let C7 = hash<msg2_C7;0>(C6, psk) in
    let tau = hash<msg2_C7;1>(C6, psk) in
    let k0 = hash<msg2_C7;2>(C6, psk) in
    let H6 : Data<adv> = crh(concat(H5, tau)) in
    let emptystring : Data<adv> |0| = call get_empty_i() in
    
    corr_case msg2_C7[2] when (msg2_ephemeral == dhpk(get(E_resp))) in
    case st_aead_dec(k0, msg2_empty, 0x, H6) 
    | None => None<ty:transp_keys_t>()
    | Some msg2_empty_dec => 
        guard eq(msg2_empty_dec, emptystring) in 
        let H7 = crh(concat(H6, msg2_empty)) in
        
        // Calculate transport keys
        let T_init_send = hash<transp_T;0>(C7, 0x) in
        let T_init_recv = hash<transp_T;1>(C7, 0x) in
        let retval = transp_keys(msg2_receiver, msg2_sender, dhpk(get(E_init)), msg2_ephemeral, T_init_send, T_init_recv) in
        Some(retval)

def transp_send_init (transp_keys_val : transp_keys_t) @ Initiator 
    : Option(Unit) = 
    let transp_receiver = _transp_keys_responder(transp_keys_val) in
    let T_init_send_union = _transp_keys_T_init_send(transp_keys_val) in
    let plaintext = get(plaintext_init) in
    let transp_reserved = call get_padding_i() in

    guard eq(length(transp_receiver), 4) in 
    union_case T_init_send = T_init_send_union in

    let transp_counter = get_counter N_init_send in
    assume(length(transp_counter) == 8); // TODO add |counter| length const

    let transp_packet = st_aead_enc<N_init_send>(T_init_send, plaintext, 0x) in

    let transp_payload_value = transp_payload(transp_reserved, transp_receiver, transp_counter, transp_packet) in
    let transp_output = transp(transp_payload_value) in

    let _ = output transp_output in
    Some(())

