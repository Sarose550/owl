/*

type := 0x1 (1 byte) 
reserved := 0^3 (3 bytes)
sender := I_i (4 bytes)
ephemeral (32 bytes)
static (32 bytes)
timestamp (12 bytes)
mac1 (16 bytes) 
mac2 (16 bytes)

*/

/*
TODOs: 
- specify authenticated data values for the AEAD names generated from msg1_C2 and msg1_C3 (new primitive for aenc)
- synchronized enckey_with_nonce counters across multiple localities
- think about timestamp() --- indexed nonce?

*/




locality Initiator
locality Responder

// Ephemeral Diffie-Hellman keys
name E_init : DH @ Initiator
name E_resp : DH @ Responder

// Static Diffie-Hellman keys (public keys should be preshared)
name S_init : DH @ Initiator
name S_resp : DH @ Responder

name msg1_C1 : RO crh("construction") || dhpk(get(E_init)) -> nonce
counter aead_counter_msg1_C2 @ Initiator
name msg1_C2 : RO get(msg1_C1) || dh_combine(dhpk(get(S_resp)), get(E_init)) -> nonce || 
    st_aead dhpk(S_init)
            aad x. true
            nonce aead_counter_msg1_C2
            nonce_pattern *
counter aead_counter_msg1_C3 @ Initiator
name msg1_C3 : RO get(msg1_C2[0]) || dh_combine(dhpk(get(S_resp)), get(S_init)) -> nonce || 
    st_aead (Data<adv> |12|)
            aad x.true
            nonce aead_counter_msg1_C3
            nonce_pattern *

// needs to use the crh hash function, rather than kdf
name msg1_mac1_key : RO "mac1---" || dhpk(get(S_resp)) -> mackey Data<adv> 

name msg2_C4 : RO get(msg1_C3[0]) || dhpk(get(E_resp)) -> nonce
name msg2_C5 : RO get(msg2_C4[0]) || dh_combine(dhpk(get(E_init)), get(E_resp)) -> nonce
name msg2_C6 : RO get(msg2_C5[0]) || dh_combine(dhpk(get(S_init)), get(E_resp)) -> nonce
counter aead_counter_msg2_C7 @ Responder
name msg2_C7 : RO get(msg2_C6[0]) || "0000" -> nonce || nonce || 
    st_aead (Data<adv> |0|)
            aad x. true
            nonce aead_counter_msg2_C7
            nonce_pattern *
    admit_uniqueness // TODO
corr adv ==> [msg2_C7[1]]

// needs to use the crh hash function, rather than kdf
name msg2_mac1_key : RO "mac1---" || dhpk(get(S_init)) -> mackey Data<adv>
    admit_uniqueness // TODO

////////////////////////////
// Message formats

struct msg1_payload {
      _msg1_reserved : Data<adv> |3|
    , _msg1_sender : Data<adv> |4| // bytes??
    , _msg1_ephemeral : dhpk(E_init)
    , _msg1_static : Data<adv> | cipherlen(length(dhpk(get(S_init)))) |
    , _msg1_timestamp: Data<adv> | cipherlen(12) |
    // TODO cookie mechanism
    , _msg1_mac1: Data<adv> | |maclen| |
    // , _msg1_mac2: Data<adv> | |maclen| |
}

struct msg2_payload {
      _msg2_reserved : Data<adv> |3|
    , _msg2_sender: Data<adv> |4|
    , _msg2_receiver: Data<adv> |4|
    , _msg2_ephemeral: dhpk(E_resp)
    , _msg2_empty: Data<adv> | cipherlen(0) |
    // TODO cookie mechanism
    , _msg2_mac1: Data<adv> | |maclen| |
    // , _msg2_mac2: Data<adv> | |maclen| |
}

enum msg {
    | msg1 msg1_payload
    | msg2 msg2_payload
}

////////////////////////////
// Primitives

def get_padding_i () @ Initiator : Data<adv> |3| // TODO primitive for zero bytes?
def get_sender_i  () @ Initiator : Data<adv> |4| // TODO can we model this as a nonce?
def timestamp_i   () @ Initiator : Data<adv> |12|
def get_empty_i   () @ Initiator : Data<adv> |0|

def get_padding_r () @ Responder : Data<adv> |3| // TODO primitive for zero bytes?
def get_sender_r  () @ Responder : Data<adv> |4| // TODO can we model this as a nonce?
def timestamp_r   () @ Responder : Data<adv> |12|
def get_empty_r   () @ Responder : Data<adv> |0|

////////////////////////////
// Return data

struct initiator_msg1_val {
      _initiator_msg1_C3 : Name(msg1_C3[0])
    , _initiator_msg1_H4 : Data<adv> // todo
}

struct responder_msg1_val {
      _responder_msg1_C3 : Union<Name(msg1_C3[0]), Data<adv>>
    , _responder_msg1_H4 : Data<adv> // todo
    , _responder_msg1_ephemeral : Data<adv>
    , _responder_msg1_sender : Data<adv> |4|
}

predicate not_in_ro(x) = (
                    x != preimage(msg1_C1)
                 /\ x != preimage(msg1_C2)
                 /\ x != preimage(msg1_C3)
                 /\ x != preimage(msg1_mac1_key)
                 /\ x != preimage(msg2_C4)
                 /\ x != preimage(msg2_C5)
                 /\ x != preimage(msg2_C6)
                 /\ x != preimage(msg2_C7)
                 /\ x != preimage(msg2_mac1_key))

predicate valid_responder_msg1_val (s) = 
    is_group_elem(_responder_msg1_ephemeral(s)) /\ 
    ((_responder_msg1_ephemeral(s) == dhpk(get(E_init))) ==> (
        _responder_msg1_C3(s) == get(msg1_C3[0])
    )) 
    /\ ((_responder_msg1_ephemeral(s) != dhpk(get(E_init))) ==> (
        _responder_msg1_C3(s) != get(msg1_C3[0]) 
        /\ not_in_ro[concat(_responder_msg1_C3(s), dhpk(get(E_resp)))]))

type responder_msg1_val_t = s:responder_msg1_val {valid_responder_msg1_val[s]}


def generate_msg1 (dhpk_S_resp : dhpk(S_resp)) @ Initiator : initiator_msg1_val =
    let C0 = crh("construction") in
    let H0 = crh(concat(C0, "identifier")) in 
    let H1 = crh(concat(H0, dhpk_S_resp)) in
    let C1 = hash<msg1_C1>(C0, dhpk(get(E_init))) in 
    let msg1_ephemeral = dhpk(get(E_init)) in
    let H2 = crh(concat(H1, msg1_ephemeral)) in
    let C2 = hash<msg1_C2;0>(C1, dh_combine(dhpk_S_resp, get(E_init))) in
    let k0 = hash<msg1_C2;1>(C1, dh_combine(dhpk_S_resp, get(E_init))) in
    let msg1_static : Data<adv> |cipherlen(length(dhpk(get(S_init))))| 
        = st_aead_enc<aead_counter_msg1_C2>(k0, dhpk(get(S_init)), H2) in 
    let H3 = crh(concat(H2, msg1_static)) in
    let C3 = hash<msg1_C3;0>(C2, dh_combine(dhpk_S_resp, get(S_init))) in
    let k1 = hash<msg1_C3;1>(C2, dh_combine(dhpk_S_resp, get(S_init))) in
    let timestamp = call timestamp_i() in
    let msg1_timestamp : Data<adv> |cipherlen(12)| =
    st_aead_enc<aead_counter_msg1_C3>(k1, timestamp, H3) in 
    let H4 = crh(concat(H3, timestamp)) in

    let msg1_sender : Data<adv> |4| = call get_sender_i() in
    let msg1_reserved : Data<adv> |3| = call get_padding_i() in

    let msg1_mac1_k = hash<msg1_mac1_key>("mac1---", dhpk_S_resp) in 
    // TODO this needs to incorporate the tag byte 
    let msg1_mac1 : Data<adv> | |maclen| | = mac(msg1_mac1_k, 
        concat(msg1_reserved, concat(msg1_sender, concat(msg1_ephemeral,
        concat(msg1_static, msg1_timestamp))))) in 
    let msg1_payload_value = msg1_payload(msg1_reserved, msg1_sender,
    msg1_ephemeral, msg1_static, msg1_timestamp, msg1_mac1) in
    let msg1_output = msg1(msg1_payload_value) in
    let _ = output msg1_output in 
    
    let retval = initiator_msg1_val(C3, H4) in
    retval


 def receive_msg1 (dhpk_S_init : dhpk(S_init)) @ Responder 
     : Option (responder_msg1_val_t) 
     =
     set_option ":rlimit" "2000000" in // TODO
     input inp in
     let msg1_reserved = _msg1_reserved(inp) in
     let msg1_sender = _msg1_sender(inp) in // TODO: Why does this not get a length annotation of 4?
     let msg1_ephemeral = _msg1_ephemeral(inp) in
     let msg1_static = _msg1_static(inp) in
     let msg1_timestamp = _msg1_timestamp(inp) in
     let msg1_mac1 = _msg1_mac1(inp) in
  
     if eq(length(msg1_sender), 4) then begin

         let C0 = crh("construction") in
         let H0 = crh(concat(C0, "identifier")) in 
         let H1 = crh(concat(H0, dhpk(get(S_resp)))) in
      
         if is_group_elem(msg1_ephemeral) then begin

             pcase (msg1_ephemeral != dhpk(get(E_init))) in

             let C1 = hash<msg1_C1>(C0, msg1_ephemeral) in 
             let H2 = crh(concat(H1, msg1_ephemeral)) in
             is_constant_lemma<crh("construction")>();
             is_constant_lemma<"mac1---">();
             is_constant_lemma<"0000">();
             let C2 = hash<msg1_C2;0>(C1, dh_combine(msg1_ephemeral, get(S_resp))) in
             let k0 = hash<msg1_C2;1>(C1, dh_combine(msg1_ephemeral, get(S_resp))) in

             corr_case msg1_C2[1] in
             case st_aead_dec(k0, msg1_static, 0, H2) 
             | None => None<ty:responder_msg1_val_t>()
             | Some msg1_static_dec => 
                 if eq(msg1_static_dec, dhpk_S_init) then begin 

                     let H3 = crh(concat(H2, dhpk_S_init)) in
                     assert(msg1_ephemeral != dhpk(get(E_init)) ==> 
                        not_in_ro[concat(C2, dh_combine(dhpk_S_init, get(S_resp)))]);

                     let C3 = hash<msg1_C3;0>(C2, dh_combine(dhpk_S_init, get(S_resp))) in
                     let k1 = hash<msg1_C3;1>(C2, dh_combine(dhpk_S_init, get(S_resp))) in
                  
                     corr_case msg1_C3[1] in
                     case st_aead_dec(k1, msg1_timestamp, 0, H3) 
                     | None => None<ty:responder_msg1_val_t>()
                     | Some msg1_timestamp_dec =>
                        let H4 = crh(concat(H3, msg1_timestamp_dec)) in

                        let retval:responder_msg1_val = responder_msg1_val(C3, H4, msg1_ephemeral, msg1_sender) in
                        assume(_responder_msg1_C3(retval) == C3);
                        assume(_responder_msg1_ephemeral(retval) == msg1_ephemeral);
                        Some(retval)

                 end else None<ty:responder_msg1_val_t>()

         end else None<ty:responder_msg1_val_t>()

     end else None<ty:responder_msg1_val_t>()

def generate_msg2 (msg1_val: responder_msg1_val_t, dhpk_S_init : dhpk(S_init)) @ Responder 
    : Unit = 
    let C3_union = _responder_msg1_C3(msg1_val) in     
    let H4 = _responder_msg1_H4(msg1_val) in
    let dhpk_E_init = _responder_msg1_ephemeral(msg1_val) in
    let msg2_receiver = _responder_msg1_sender(msg1_val) in
    is_constant_lemma<crh("construction")>();
    is_constant_lemma<"mac1---">();
    is_constant_lemma<"0000">();

    pcase (dhpk_E_init != dhpk(get(E_init))) in 
    union_case C3 = C3_union in
    false_elim in 
    
    let psk = "0000" in // should be zeros(32)

    let C4 = hash<msg2_C4>(C3, dhpk(get(E_resp))) in
    let msg2_ephemeral = dhpk(get(E_resp)) in
    let H5 = crh(concat(H4, msg2_ephemeral)) in
    
    let x = concat(C4, dh_combine(dhpk_E_init, get(E_resp))) in
    let C5 = hash<msg2_C5>(C4, dh_combine(dhpk_E_init, get(E_resp))) in


    let C6 = hash<msg2_C6>(C5, dh_combine(dhpk_S_init, get(E_resp))) in
    let C7 = hash<msg2_C7;0>(C6, psk) in
    let tau= hash<msg2_C7;1>(C6, psk) in
    let k0 = hash<msg2_C7;2>(C6, psk) in
    let H6 : Data<adv> = crh(concat(H5, tau)) in
    let emptystring : Data<adv> |0| = call get_empty_r() in
    let msg2_empty : Data<adv> |cipherlen(0)| = st_aead_enc<aead_counter_msg2_C7>(k0, emptystring, H6) in
    let H7 = crh(concat(H6, msg2_empty)) in

    let msg2_sender : Data<adv> |4| = call get_sender_r() in
    let msg2_reserved : Data<adv> |3| = call get_padding_r() in

    let msg2_mac1_k = hash<msg2_mac1_key>("mac1---", dhpk_S_init) in
    // // TODO this needs to incorporate the tag byte
    let msg2_mac1 : Data<adv> | |maclen| | = mac(msg2_mac1_k,
        concat(msg2_reserved, concat(msg2_sender, concat(msg2_receiver, concat(msg2_ephemeral, msg2_empty))))
    ) in
    let msg2_payload_value = msg2_payload(
        msg2_reserved, msg2_sender, msg2_receiver, msg2_ephemeral, msg2_empty, msg2_mac1
    ) in
    let msg2_output = msg2(msg2_payload_value) in
    let _ = output msg2_output in
    ()
